/*
 * Aifs api
 *
 * aifs api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apigin

import (
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	manager "github.com/jacklv111/aifs/app/apigin/manager/data-view"
	"github.com/jacklv111/aifs/app/apigin/view-object/openapi"
	dataview "github.com/jacklv111/aifs/pkg/data-view"
	"github.com/jacklv111/common-sdk/errors"
	"github.com/jacklv111/common-sdk/log"
	"github.com/jacklv111/common-sdk/utils"
)

// UploadAnnotationToDataView - Upload annotations to data view
func UploadAnnotationToDataView(c *gin.Context) {
	dataViewId := uuid.MustParse(c.Param(DATA_VIEW_ID))

	fileMeta, dataFileMap, dataFileNameMap, closerList, err := getAnnotationDataReaderFromMultipartForm(c)
	defer utils.CloseFiles(closerList)
	if err != nil {
		log.Errorf("Error occurred when uploading annotations to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	err = manager.DataViewMgr.UploadAnnotationToDataView(dataViewId, fileMeta, dataFileMap, dataFileNameMap)
	if err != nil {
		if err == dataview.ErrDataViewNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, dataViewId.String()))
			return
		}
		log.Errorf("Error occurred when uploading annotations to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	c.Status(http.StatusOK)
}

// UploadDatasetZipToDataView - Upload dataset zip
func UploadDatasetZipToDataView(c *gin.Context) {
	log.Info("begin to upload dataset zip to data view")
	dataViewId := uuid.MustParse(c.Param(DATA_VIEW_ID))
	file := c.Request.Body
	defer utils.CloseFiles([]io.Closer{c.Request.Body})
	fileName := c.GetHeader(X_FILE_NAME)
	if fileName == "" {
		fileName = "no_name"
	}
	err := manager.DataViewMgr.UploadDatasetZipToDataView(dataViewId, file, fileName)

	if err != nil {
		if err == dataview.ErrDataViewNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, dataViewId.String()))
			return
		}
		log.Errorf("Error occurred when uploading model data to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.Status(http.StatusOK)
}

// UploadFileToDataView - Upload file to data view
func UploadFileToDataView(c *gin.Context) {
	dataViewId := uuid.MustParse(c.Param(DATA_VIEW_ID))
	file := c.Request.Body
	defer utils.CloseFiles([]io.Closer{c.Request.Body})
	fileName := c.GetHeader(X_FILE_NAME)
	if fileName == "" {
		fileName = "no_name"
	}

	err := manager.DataViewMgr.UploadFileToDataView(dataViewId, file, fileName)
	if err != nil {
		if err == dataview.ErrDataViewNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, dataViewId.String()))
			return
		}
		log.Errorf("Error occurred when uploading model data to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.Status(http.StatusOK)
}

// UploadModelDataToDataView - Upload model data to data view
func UploadModelDataToDataView(c *gin.Context) {
	dataViewId := uuid.MustParse(c.Param(DATA_VIEW_ID))
	pairs, dataFileMap, closers, err := getModelDataFromMultipartForm(c)
	defer utils.CloseFiles(closers)
	if err != nil {
		log.Errorf("Error occurred when get model data from multipart form %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	err = manager.DataViewMgr.UploadModelDataToDataView(dataViewId, pairs, dataFileMap)
	if err != nil {
		if err == dataview.ErrDataViewNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, dataViewId.String()))
			return
		}
		log.Errorf("Error occurred when uploading model data to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}
	c.Status(http.StatusOK)
}

// UploadRawDataToDataView - Upload raw data to data view
func UploadRawDataToDataView(c *gin.Context) {
	dataViewId := uuid.MustParse(c.Param(DATA_VIEW_ID))

	fileMeta, dataFileMap, closerList, err := getRawDataReaderFromMultipartForm(c)
	defer utils.CloseFiles(closerList)
	if err != nil {
		if err == dataview.ErrDataViewNotFound {
			c.Error(errors.NewAppErr(NOT_FOUND, err, dataViewId.String()))
			return
		}
		log.Errorf("Error occurred when uploading raw data to data view %s", err)
		c.Error(errors.NewAppErr(UNDEFINED_ERROR, err, err.Error()))
		return
	}

	err = manager.DataViewMgr.UploadRawDataToDataView(dataViewId, fileMeta, dataFileMap)
	if err != nil {
		log.Errorf("Error occurred when uploading raw data to data view %s", err)
		// TODO: 选择合适错误码和 msg
		c.JSON(http.StatusBadRequest, openapi.Error{Code: "1", Message: err.Error()})
		return
	}

	c.Status(http.StatusOK)
}
